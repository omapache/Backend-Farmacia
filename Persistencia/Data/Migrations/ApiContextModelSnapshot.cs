// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoIdFk")
                        .HasColumnType("int");

                    b.Property<string>("NombreCiudad")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("nombreCiudad");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoIdFk");

                    b.ToTable("ciudad", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreDepartamento")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("nombreDepartamento");

                    b.Property<int>("PaisIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaisIdFk");

                    b.ToTable("departamento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.DetalleMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("InventMedicamentoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("MovInventarioIdFk")
                        .HasColumnType("int");

                    b.Property<double>("Precio")
                        .HasColumnType("double")
                        .HasColumnName("precio");

                    b.HasKey("Id");

                    b.HasIndex("InventMedicamentoIdFk");

                    b.HasIndex("MovInventarioIdFk");

                    b.ToTable("detalleMovimiento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CallePrincipal")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("callePrincipal");

                    b.Property<string>("CalleSecundaria")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("calleSecundaria");

                    b.Property<int>("CiudadIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("descripcion");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("numero");

                    b.Property<int>("PersonaIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CiudadIdFk");

                    b.HasIndex("PersonaIdFk");

                    b.ToTable("direccion", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("direccion");

                    b.Property<int>("PersonaIdFk")
                        .HasColumnType("int");

                    b.Property<int>("TipoEmailIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaIdFk");

                    b.HasIndex("TipoEmailIdFk");

                    b.ToTable("email", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.FormaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar")
                        .HasColumnName("descripcion");

                    b.HasKey("Id");

                    b.ToTable("formapago", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.InventarioMedicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaExpiracion")
                        .HasMaxLength(256)
                        .HasColumnType("date")
                        .HasColumnName("fechaExpiracion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar")
                        .HasColumnName("nombre");

                    b.Property<int>("PersonaIdFk")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.Property<int>("TipoPresentacionIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaIdFk");

                    b.HasIndex("TipoPresentacionIdFk");

                    b.ToTable("inventarioMedicamento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("marca", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentoReceta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar")
                        .HasColumnName("descripcion");

                    b.Property<int?>("InventarioMedicamentoId")
                        .HasColumnType("int");

                    b.Property<int>("IventMedicamentoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("RecetaIdFk")
                        .HasColumnType("int");

                    b.Property<int?>("RecetaMedicaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventarioMedicamentoId");

                    b.HasIndex("RecetaMedicaId");

                    b.ToTable("medicamentoReceta", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.MovimientoInventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaMovimiento")
                        .HasColumnType("date")
                        .HasColumnName("fechaMovimiento");

                    b.Property<DateOnly>("FechaVencimiento")
                        .HasColumnType("date")
                        .HasColumnName("fechaVencimiento");

                    b.Property<int>("FormaPagoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("ReceptorIdFk")
                        .HasColumnType("int");

                    b.Property<int>("RecetaMedicaIdFk")
                        .HasColumnType("int");

                    b.Property<int>("ResponsableIdFk")
                        .HasColumnType("int");

                    b.Property<int>("TipoMovInventIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormaPagoIdFk");

                    b.HasIndex("ReceptorIdFk");

                    b.HasIndex("RecetaMedicaIdFk")
                        .IsUnique();

                    b.HasIndex("ResponsableIdFk");

                    b.HasIndex("TipoMovInventIdFk");

                    b.ToTable("movimientoInventario", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombrePais")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("nombrePais");

                    b.HasKey("Id");

                    b.ToTable("pais", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DireccionId")
                        .HasColumnType("int");

                    b.Property<int?>("EmailId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("nombre");

                    b.Property<int>("RolIdFk")
                        .HasColumnType("int");

                    b.Property<int?>("TelefonoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoDocumentoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("TipoPersonaIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DireccionId");

                    b.HasIndex("EmailId");

                    b.HasIndex("RolIdFk");

                    b.HasIndex("TelefonoId");

                    b.HasIndex("TipoDocumentoIdFk");

                    b.HasIndex("TipoPersonaIdFk");

                    b.ToTable("persona", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("InventMedicamentoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("MarcaIdFk")
                        .HasColumnType("int");

                    b.Property<double>("Precio")
                        .HasColumnType("double")
                        .HasColumnName("precio");

                    b.HasKey("Id");

                    b.HasIndex("InventMedicamentoIdFk");

                    b.HasIndex("MarcaIdFk");

                    b.ToTable("producto", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.ProductoProveedor", b =>
                {
                    b.Property<int>("ProveedorIdFk")
                        .HasColumnType("int");

                    b.Property<int>("ProductoIdFk")
                        .HasColumnType("int");

                    b.HasKey("ProveedorIdFk", "ProductoIdFk");

                    b.HasIndex("ProductoIdFk");

                    b.ToTable("ProductoProveedores");
                });

            modelBuilder.Entity("Dominio.Entities.RecetaMedica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar")
                        .HasColumnName("descripcion");

                    b.Property<int>("DoctorIdFk")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCaducidad")
                        .HasColumnType("date")
                        .HasColumnName("fechaCadudicad");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date")
                        .HasColumnName("fechaCreacion");

                    b.Property<int>("PacienteIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorIdFk");

                    b.HasIndex("PacienteIdFk");

                    b.ToTable("recetaMedica", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("rolName");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Telefono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("numero");

                    b.Property<int>("PersonaIdFk")
                        .HasColumnType("int");

                    b.Property<int>("TipoTelefonoIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaIdFk");

                    b.HasIndex("TipoTelefonoIdFk");

                    b.ToTable("telefono", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar")
                        .HasColumnName("descripcion");

                    b.HasKey("Id");

                    b.ToTable("tipoDocumento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("descripcion");

                    b.HasKey("Id");

                    b.ToTable("tipoEmail", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoMovimientoInventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("tipoMovimientoInventario", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoPersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar")
                        .HasColumnName("descripcion");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("tipoPersona", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoPresentacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar")
                        .HasColumnName("descripcion");

                    b.HasKey("Id");

                    b.ToTable("tipoPresentacion", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoTelefono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("descripcion");

                    b.HasKey("Id");

                    b.ToTable("tipoTelefono", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("PersonaIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.UserRol", b =>
                {
                    b.Property<int>("UsuarioIdFk")
                        .HasColumnType("int");

                    b.Property<int>("RolIdFk")
                        .HasColumnType("int");

                    b.HasKey("UsuarioIdFk", "RolIdFk");

                    b.HasIndex("RolIdFk");

                    b.ToTable("userRol", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.HasOne("Dominio.Entities.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("DepartamentoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.HasOne("Dominio.Entities.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("PaisIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Dominio.Entities.DetalleMovimiento", b =>
                {
                    b.HasOne("Dominio.Entities.InventarioMedicamento", "InventarioMedicamento")
                        .WithMany("DetalleMovimientos")
                        .HasForeignKey("InventMedicamentoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.MovimientoInventario", "MovimientoInventario")
                        .WithMany("DetalleMovimientos")
                        .HasForeignKey("MovInventarioIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventarioMedicamento");

                    b.Navigation("MovimientoInventario");
                });

            modelBuilder.Entity("Dominio.Entities.Direccion", b =>
                {
                    b.HasOne("Dominio.Entities.Ciudad", "Ciudad")
                        .WithMany("Direcciones")
                        .HasForeignKey("CiudadIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Persona", "Persona")
                        .WithMany("Direcciones")
                        .HasForeignKey("PersonaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.Entities.Email", b =>
                {
                    b.HasOne("Dominio.Entities.Persona", "Persona")
                        .WithMany("Emails")
                        .HasForeignKey("PersonaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoEmail", "TipoEmail")
                        .WithMany("Emails")
                        .HasForeignKey("TipoEmailIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("TipoEmail");
                });

            modelBuilder.Entity("Dominio.Entities.InventarioMedicamento", b =>
                {
                    b.HasOne("Dominio.Entities.Persona", "Persona")
                        .WithMany("InventarioMedicamentos")
                        .HasForeignKey("PersonaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoPresentacion", "TipoPresentacion")
                        .WithMany("InventarioMedicamentos")
                        .HasForeignKey("TipoPresentacionIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("TipoPresentacion");
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentoReceta", b =>
                {
                    b.HasOne("Dominio.Entities.InventarioMedicamento", "InventarioMedicamento")
                        .WithMany("MedicamentoRecetas")
                        .HasForeignKey("InventarioMedicamentoId");

                    b.HasOne("Dominio.Entities.RecetaMedica", "RecetaMedica")
                        .WithMany()
                        .HasForeignKey("RecetaMedicaId");

                    b.Navigation("InventarioMedicamento");

                    b.Navigation("RecetaMedica");
                });

            modelBuilder.Entity("Dominio.Entities.MovimientoInventario", b =>
                {
                    b.HasOne("Dominio.Entities.FormaPago", "FormaPago")
                        .WithMany("MovimientoInventarios")
                        .HasForeignKey("FormaPagoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Persona", "Receptor")
                        .WithMany("MovimientoInventariosReceptor")
                        .HasForeignKey("ReceptorIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.RecetaMedica", "RecetaMedica")
                        .WithOne("MovimientoInventario")
                        .HasForeignKey("Dominio.Entities.MovimientoInventario", "RecetaMedicaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Persona", "Responsable")
                        .WithMany("MovimientoInventariosResponsable")
                        .HasForeignKey("ResponsableIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoMovimientoInventario", "TipoMovimientoInventario")
                        .WithMany("MovimientoInventarios")
                        .HasForeignKey("TipoMovInventIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormaPago");

                    b.Navigation("Receptor");

                    b.Navigation("RecetaMedica");

                    b.Navigation("Responsable");

                    b.Navigation("TipoMovimientoInventario");
                });

            modelBuilder.Entity("Dominio.Entities.Persona", b =>
                {
                    b.HasOne("Dominio.Entities.Direccion", null)
                        .WithMany("Personas")
                        .HasForeignKey("DireccionId");

                    b.HasOne("Dominio.Entities.Email", null)
                        .WithMany("Personas")
                        .HasForeignKey("EmailId");

                    b.HasOne("Dominio.Entities.Rol", "Rol")
                        .WithMany("Personas")
                        .HasForeignKey("RolIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Telefono", null)
                        .WithMany("Personas")
                        .HasForeignKey("TelefonoId");

                    b.HasOne("Dominio.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany("Personas")
                        .HasForeignKey("TipoDocumentoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoPersona", "TipoPersona")
                        .WithMany("Personas")
                        .HasForeignKey("TipoPersonaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("TipoDocumento");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.HasOne("Dominio.Entities.InventarioMedicamento", "InventarioMedicamento")
                        .WithMany("Productos")
                        .HasForeignKey("InventMedicamentoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Marca", "Marca")
                        .WithMany("Productos")
                        .HasForeignKey("MarcaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventarioMedicamento");

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("Dominio.Entities.ProductoProveedor", b =>
                {
                    b.HasOne("Dominio.Entities.Producto", "Producto")
                        .WithMany("ProductoProveedores")
                        .HasForeignKey("ProductoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Persona", "Proveedor")
                        .WithMany("ProductoProveedores")
                        .HasForeignKey("ProveedorIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.Entities.RecetaMedica", b =>
                {
                    b.HasOne("Dominio.Entities.Persona", "Doctor")
                        .WithMany("RecetaMedicaDoctor")
                        .HasForeignKey("DoctorIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Persona", "Paciente")
                        .WithMany("RecetaMedicaPaciente")
                        .HasForeignKey("PacienteIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.HasOne("Dominio.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.Entities.Telefono", b =>
                {
                    b.HasOne("Dominio.Entities.Persona", "Persona")
                        .WithMany("Telefonos")
                        .HasForeignKey("PersonaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoTelefono", "TipoTelefono")
                        .WithMany("Telefonos")
                        .HasForeignKey("TipoTelefonoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("TipoTelefono");
                });

            modelBuilder.Entity("Dominio.Entities.TipoPersona", b =>
                {
                    b.HasOne("Dominio.Entities.Persona", null)
                        .WithMany("TipoPersonas")
                        .HasForeignKey("PersonaId");
                });

            modelBuilder.Entity("Dominio.Entities.User", b =>
                {
                    b.HasOne("Dominio.Entities.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.Entities.UserRol", b =>
                {
                    b.HasOne("Dominio.Entities.Rol", "Rol")
                        .WithMany("UsersRols")
                        .HasForeignKey("RolIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.User", "User")
                        .WithMany("UsersRols")
                        .HasForeignKey("UsuarioIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.Navigation("Direcciones");
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Dominio.Entities.Direccion", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Dominio.Entities.Email", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Dominio.Entities.FormaPago", b =>
                {
                    b.Navigation("MovimientoInventarios");
                });

            modelBuilder.Entity("Dominio.Entities.InventarioMedicamento", b =>
                {
                    b.Navigation("DetalleMovimientos");

                    b.Navigation("MedicamentoRecetas");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Entities.Marca", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Entities.MovimientoInventario", b =>
                {
                    b.Navigation("DetalleMovimientos");
                });

            modelBuilder.Entity("Dominio.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Persona", b =>
                {
                    b.Navigation("Direcciones");

                    b.Navigation("Emails");

                    b.Navigation("InventarioMedicamentos");

                    b.Navigation("MovimientoInventariosReceptor");

                    b.Navigation("MovimientoInventariosResponsable");

                    b.Navigation("ProductoProveedores");

                    b.Navigation("RecetaMedicaDoctor");

                    b.Navigation("RecetaMedicaPaciente");

                    b.Navigation("Telefonos");

                    b.Navigation("TipoPersonas");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.Navigation("ProductoProveedores");
                });

            modelBuilder.Entity("Dominio.Entities.RecetaMedica", b =>
                {
                    b.Navigation("MovimientoInventario");
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Navigation("Personas");

                    b.Navigation("UsersRols");
                });

            modelBuilder.Entity("Dominio.Entities.Telefono", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Dominio.Entities.TipoDocumento", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Dominio.Entities.TipoEmail", b =>
                {
                    b.Navigation("Emails");
                });

            modelBuilder.Entity("Dominio.Entities.TipoMovimientoInventario", b =>
                {
                    b.Navigation("MovimientoInventarios");
                });

            modelBuilder.Entity("Dominio.Entities.TipoPersona", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Dominio.Entities.TipoPresentacion", b =>
                {
                    b.Navigation("InventarioMedicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.TipoTelefono", b =>
                {
                    b.Navigation("Telefonos");
                });

            modelBuilder.Entity("Dominio.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UsersRols");
                });
#pragma warning restore 612, 618
        }
    }
}
